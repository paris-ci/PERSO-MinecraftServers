plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("com.gradleup.shadow") version "9.0.2"
}

group = 'com.api_d'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sk89q-repo"
        url = "https://maven.enginehub.org/repo/"
    }
    maven {
        name = "spigot-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    
    // Database dependencies - these need to be included in the final JAR
    implementation("org.postgresql:postgresql:42.7.4")
    implementation("com.zaxxer:HikariCP:5.1.0")
    
    // Utility dependencies - these need to be included in the final JAR
    implementation("org.json:json:20240303")
    implementation("com.google.guava:guava:33.0.0-jre")
    
    // WorldEdit API - using the correct artifact and version
    compileOnly("com.sk89q.worldedit:worldedit-bukkit:7.2.15")
}

// Configure shadowJar to relocate dependencies to avoid conflicts
tasks {
    shadowJar {
        def mapping = [
            "com.zaxxer.hikari": "hikari",
            "org.postgresql": "postgresql",
            "org.json": "json",
            "com.google.common": "guava"
        ]
        def base = "com.api_d.hungerGames.libs."
        mapping.each { pattern, name ->
            relocate(pattern, "${base}${name}")
        }
    }
    
    // Make build depend on shadowJar
    build {
        dependsOn(shadowJar)
    }
    
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
